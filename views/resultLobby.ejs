<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>Core War Web | Game Lobbies</title>
  </head>
  <body>
    <% if (user) { %>
      <h1>Game lobbies</h1>
      <p>Hey <i><%= user.name %></i>, here you can join this lobby</p>
      <p>You can temporary go to an hard coded version of the <a href="/arena.html">arena</a></p>
    <% if (lobby) { %>
        <p>Lobby: <i><%= lobby.name %></i>, max players: <i><%= lobby.maxPlayers %></i></p>
        <% lobby.users.forEach(function (member) { %>
          <p>
            Member: <i><%= member.name %></i>
          </p>
    <% });} %>
    <svg width="2000" height="1800">
    </svg>
    <p id="waiting"> Waiting for the game to be finished! <p>
    <% if (status) { %>
        <h2> <%= status %> </h2> <%
        if (status == 'member')
        { %>
          <p>Leave this lobby  <a href="/lobbies.html/<%= lobby._id %>/leave">Leave</a></p>
        <% }
        else if (status == 'creator')
        { %>
          <p>Erase this lobby  <a href="/lobbies.html/<%= lobby._id %>/erase">Erase</a></p>
        <% }
    } %>
      <p>Get back to <a href="/index.html">main page</a></p>
    <% } else { %>
      <h1>An error occured</h1>
        <p>Go back to the <a href="/index.html">main page</a></p>
    <% } %>
  </body>

  <script src="/socket.io/socket.io.js"></script>
  <script src="https://d3js.org/d3.v3.min.js" charset="UTF-8">
  </script>
  <script charset="UTF-8">
      var lobby = io.connect('http://localhost:8080/<%= lobby._id %>');
      if (d3)
      {
        lobby.on('<%= lobby._id %>', function (data) {
        try {
            var Arena = JSON.parse(data.coreDump);
          }catch(e){
              console.log(e); //error in the above string(in this case,yes)!
          }

          function loadChampions()
          {
            var colourTab = [ "red", "blue", "green", "yellow", "brown" ];
            var championColour = [];
            var i = 0;
            var counter = 0;

            console.log('Champions count: ' + Arena.replay.nbPlayers);
            Arena.replay.champions.forEach(function (champion) {
              championColour.push(colourTab[i++]);
              counter = champion.entryPoint;
            });
            return championColour;
          }

          function doTurn(championColour)
          {
            var currentCycle = 0;
            var counter = 0;
            var flag = 0;

            Arena.replay.modifList.forEach(function (snapshot) {
                snapshot.forEach(function (modif) {
                  d3.select("#r" + modif.position).transition().duration(1500).style('fill', championColour[modif.championId - 1]);
                });
            });
            console.log('Done');
          }

          var svg = d3.select('svg');
          var initArray = [];

          for (var i = 0; i < 6 * 1024; i++)
            initArray.push({ at: i })
          var rects = svg.selectAll('rect').data(initArray);
          var newRects = rects.enter();
          newRects.append('rect')
          .filter(function(d) {
            return d.at >= 0;
          })
          .attr('y', function(d, i) {
            return Math.floor((d.at / 128)) * 16;
          })
          .attr('x', function(d, i) {
            return Math.floor((d.at % 128)) * 13;
          })
          .attr('id', function(d, i){
            return 'r' + d.at;
          })
          .attr('height', 10)
          .attr('width', 10)
          .transition().duration(1000);
          var tab = loadChampions();
          doTurn(tab);
      });
      }
  </script>
</html>
